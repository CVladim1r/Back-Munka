import asyncio

from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext

from bot.keyboards.inline import *
from bot.keyboards.reply import *
from app.database.methods import *
from bot.utils.states import *

from bot.handlers.bot_messages import *


router = Router()
bot = Bot(config.bot_token.get_secret_value(), parse_mode='HTML')


# /start
@router.message(CommandStart())
async def start(msg: Message, state: FSMContext):
    user_tgid = msg.from_user.id
    ReplyKeyboardRemove()
    
    await state.set_state(UserForm.user_tgid)
    await state.update_data(user_tgid=user_tgid)
    '''
    employer_data = await get_employer_data(user_tgid)
    user_data = await get_user_data(user_tgid)
    admin_data = await get_admin_data(user_tgid)


    if employer_data:
        await main_menu_employer(user_tgid, msg.chat.id)
        return
    
    elif user_data:
        await main_menu_user(user_tgid, msg.chat.id)
        return
    
    elif admin_data:
        await main_menu_admin(user_tgid, msg.chat.id)
        return
    '''

    await state.set_state(UserForm.user_fullname)
    user_tgfullname = msg.from_user.full_name
    await state.update_data(user_fullname=user_tgfullname)

    await state.set_state(UserForm.user_tgname)
    user_tgname = msg.from_user.username
    await state.update_data(user_tgname=user_tgname)

    await state.set_state(UserForm.user_language_code)
    user_language_code = msg.from_user.language_code
    await state.update_data(user_language_code=user_language_code)

    # –ï—Å–ª–∏ –Ω–µ—Ç username –≤ tg, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º id
    if not user_tgname:
        user_tgname = str(user_tgid)
    # –£–¥–∞–ª—è–µ–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π
    await bot.send_message(msg.chat.id, '''–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.''', reply_markup=rmk)

    # –ü–æ–∑–∂–µ –Ω–∞–¥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–µ —á–µ—Ä–µ–∑ asyncio.sleep !
    await asyncio.sleep(1)
    await msg.answer("–î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ. –ö—Ç–æ —Ç—ã?", reply_markup=await get_choose_rule())


@router.callback_query(lambda c: c.data in ["job_seeker", "employer"])
async def process_user_type(callback_query: CallbackQuery, state: FSMContext):
    user_type = callback_query.data
    await callback_query.message.delete()

    if user_type == "job_seeker":
        await callback_query.message.answer("–û—Ç–ª–∏—á–Ω–æ, —É –Ω–∞—Å –∫–∞–∫ —Ä–∞–∑ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π! –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ, –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ä–µ–∑—é–º–µ üòä", reply_markup=rmk)
        await asyncio.sleep(2)
        await callback_query.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û\n–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π –§–µ–¥–æ—Ä –ú–∏—Ö–∞–π–ª–æ–≤–∏—á", reply_markup=rmk)

        await state.set_state(JobSeekerForm.fio)
        
    elif user_type == "employer":
        await callback_query.message.answer("–û—Ç–ª–∏—á–Ω–æ, —É –Ω–∞—Å –∫–∞–∫ —Ä–∞–∑ –º–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤! –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ, –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ üòä", reply_markup=rmk)
        await asyncio.sleep(2)
        await callback_query.message.answer("–ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=rmk)
        
        await state.set_state(EmployerForm.name)


@router.message(Command('help'))
async def help_command(msg: Message):
    help_text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n" \
                "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n" \
                "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n" \
                "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n" \
                "–ò—Å–∫–∞—Ç—å –í–∞–∫–∞–Ω—Å–∏–∏ - –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n" \
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ - –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n" \
                "–û –±–æ—Ç–µ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"

    await msg.answer(help_text, reply_markup=None)
    

@router.message(Command('about'))
async def about_command(msg: Message):
    user_id = msg.from_user.id
    user_data = await get_user_data(user_id)

    if user_data:
        #await main_menu_user(msg.from_user.id, msg.message_id)
        ...
    else:
        await msg.answer('SuckMyDickBROOO', reply_markup=None)