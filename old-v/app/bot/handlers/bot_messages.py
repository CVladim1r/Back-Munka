from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import asyncio
import json
import os
import aiogram
from aiogram import Router, F, Bot, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.methods.send_photo import SendPhoto

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.base import (
    BaseEventIsolation,
    BaseStorage,
    StateType,
    StorageKey,
)
from bot.cities import CITIES
from bot.keyboards import *
from app.database.methods import *

from bot.handlers.bot_messages import *

from bot.utils.states import *
from bot.utils.format_data import *
from bot.utils.states import *
from bot.utils import format_vacancy

from bot.keyboards.inline import *
from bot.keyboards.reply import *

from app.database.db_connector import *
from app.database.methods import *

from bot.config_reader import config


router = Router()
bot = Bot(config.bot_token.get_secret_value(), parse_mode='HTML')


router = Router()

async def main_menu_user(user_id, message_id):
    main_text = "–ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏\n"
    main_text += "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
    main_text += "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ\n"
    main_text += "–û –±–æ—Ç–µ\n"
    await bot.send_message(user_id, main_text, reply_markup=await get_choose_menu_user_buttons(), disable_notification=True)
    
    
@router.message(F.text == 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def personal_cabinet(msg: Message):
    user_id = msg.from_user.id

    path_to_photo = f'img/{msg.from_user.username}\\photo.jpg'

    await msg.answer("–í–æ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–µ —Ä–µ–∑—é–º–µ:")
    data = await get_user_data(user_id)
    
    resume = f"<b>{data['user_desired_position']}</b>\n" \
             f"<u>{data['user_fio']}</u>\n" \
             f"–í–æ–∑—Ä–∞—Å—Ç: {data['user_age']}\n" \
             f"–ì–æ—Ä–æ–¥: {data['user_location_text']}\n" \
             f"–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {data['user_citizenship']}\n" \
             f"–ñ–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∑/–ø: {data['user_desired_salary_level']}\n" \
             f"–ó–∞–Ω—è—Ç–æ—Å—Ç—å: {data.get('user_employment_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n" \
             f"<i>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</i>\n" \
             
    experience = json.loads(data['user_experience'])
    if isinstance(experience, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ª–æ–≤–∞—Ä–µ–º (–∏—Ö–≤–∏–ª—å–Ω–∏—Ö)
        resume += f"<b>{experience.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n" \
                  f"–ü–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã: {experience.get('experience_period', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n" \
                  f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {experience.get('experience_position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n" \
                  f"–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: {experience.get('experience_duties', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n" \
                  
    else:
        resume += "–ù–µ —É–∫–∞–∑–∞–Ω–æ\n"
    
    additional_info = data.get('user_additional_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    resume += f"<i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</i> {additional_info}\n"
    
    await bot.send_photo(msg.chat.id, photo=types.FSInputFile(path_to_photo), caption=resume, reply_markup=await get_save_restart_keyboard())

@router.message(F.text== '‚Ü©Ô∏è –ù–∞–∑–∞–¥')
async def back_to_main_menu(msg: Message):
    user_id = msg.from_user.id
    user_data = await get_user_data(user_id)
    if user_data:
        name = user_data.get("name")
        await main_menu_user(user_id, name)
    else:
        await msg.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start", reply_markup=None)

@router.message(F.text=='‚ÑπÔ∏è –û –±–æ—Ç–µ')
async def about_bot(msg: Message):
    about_text = "–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –∫–æ–º–ø–∞–Ω–∏—è–º –≤ —Å—Ñ–µ—Ä–µ –æ–±—â–µ–ø–∏—Ç–∞ –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤."
    await msg.answer(about_text)
    
@router.message(F.text=='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ')
async def red_resume(msg: Message):
    await msg.answer("–ñ–µ–ª–∞–µ—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=await get_save_restart_keyboard())